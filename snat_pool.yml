---
- hosts: all
  become: yes
  become_method: sudo
  gather_facts: false

  tasks:
    - block:
        - name: Get networkmap
          no_log: true
          uri:
            url: "http://{{cmsurl}}/cms/networkmap?v=1633605424448"
            method: POST
            headers:
              Connection: 'keep-alive'
              Authorization: 'Bearer {{ result.json.accessToken }} '
              Accept: 'application/json, text/plain, */*'
            validate_certs: no
            body: {"context":"networkmap","action":"networkmap"}
            body_format: json
          register: get_networkmap
          failed_when: get_networkmap.status not in [200, 201]
        
        
        - name: Fetching DGID of F5
          set_fact:
            geo_f5_dgid: >-
                {% for server in get_networkmap.json.dgInfo %}{% if server.CARDTYPE == 101 and server.cardDetails[0].CLUSTERID == '2'%}{{server.DGID}}{% endif %}{% endfor %}
            pri_f5_dgid: >-
                {% for server in get_networkmap.json.dgInfo %}{% if server.CARDTYPE == 101 and server.cardDetails[0].CLUSTERID == '1'%}{{server.DGID}}{% endif %}{% endfor %}
        
        - name: Fetching F5 PTTSERVERIDs
          set_fact:
            geo_f5_pttserverid: >-
                {% for server in get_networkmap.json.dgInfo %}{% if server.CARDTYPE == 101 and server.cardDetails[0].CLUSTERID == '2'%}{{server.cardDetails[0].PTTSERVERID}}{% endif %}{% endfor %}
            pri_f5_pttserverid: >-
                {% for server in get_networkmap.json.dgInfo %}{% if server.CARDTYPE == 101 and server.cardDetails[0].CLUSTERID == '1'%}{{server.cardDetails[0].PTTSERVERID}}{% endif %}{% endfor %}
        
        ################################################# GLOBAL SNAT configuration #######################################
        
        - name: Get the list of primary virtual servers
          no_log: true
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ result.json.accessToken }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             body: '{"context":"CONFIGURED_VIRTUAL_SERVER","action":"CONFIGURED_VIRTUAL_SERVER_GETALL","object":{"dgId":"{{pri_f5_dgid}}"}}'
             body_format: json
          register: virtual_server_list
          failed_when: virtual_server_list.status not in [200, 201]
        
        - name: Filter vs list
          set_fact:
            doc1: "{{ virtual_server_list |to_json| from_json | json_query('json.data.childNodes[0].childNodes[].dataJson') }}"
        
        - name: Configure Global primary snat
          set_fact:
            snat_pri: >
               {"snatip_pri":[
                 {% for item in doc1 %}
                 {% for vs_name in f5_vs  %}
                 {% for i in vs_name.virtual_servers if ( i.name == item.DISPLAYNAME  ) %}
                 {% if vs_name.clusterid == 1 %}
                   {"context":"F5_VS_IPADDRINFO","action":"F5_VS_IPADDRINFO_UPDATE", "object": {"dgId": "{{pri_f5_dgid}}"}, "actionObject":[{"IPADDRESS_VERSION": 1, "IPADDRESS": "{{ i.snatip }}", "F5_PTTSERVERID": "{{pri_f5_pttserverid}}", "F5_VIRTUALSERVERID": {{item.F5_VIRTUALSERVERID}} }]},
                   {% endif %}
                   {% endfor %}
                   {% endfor %}
                   {% endfor %}
                   ]}
        
        - name: Get the list of geo virtual servers
          no_log: true
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ result.json.accessToken }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             body: '{"context":"CONFIGURED_VIRTUAL_SERVER","action":"CONFIGURED_VIRTUAL_SERVER_GETALL","object":{"dgId":"{{geo_f5_dgid}}"}}'
             body_format: json
          register: virtual_server_list_geo
          failed_when: virtual_server_list_geo.status not in [200, 201]
        
        - name: Filter vs list
          set_fact:
            doc2: "{{ virtual_server_list_geo |to_json| from_json | json_query('json.data.childNodes[0].childNodes[].dataJson') }}"
        
        - name: Configure global geo snat
          set_fact:
            snat_geo: >
               {"snatip_geo":[
                 {% for item in doc2 %}
                 {% for vs_name in f5_vs  %}
                 {% for i in vs_name.virtual_servers if ( i.name == item.DISPLAYNAME  ) %}
                 {% if vs_name.clusterid == 2 %}
                   {"context":"F5_VS_IPADDRINFO","action":"F5_VS_IPADDRINFO_UPDATE", "object": {"dgId": "{{geo_f5_dgid}}"}, "actionObject":[{"IPADDRESS_VERSION": 1, "IPADDRESS": "{{ i.snatip }}", "F5_PTTSERVERID": "{{geo_f5_pttserverid}}", "F5_VIRTUALSERVERID": {{item.F5_VIRTUALSERVERID}} }]},
                   {% endif %}
                   {% endfor %}
                   {% endfor %}
                   {% endfor %}
                   ]}
        
        - name: Add pri global snat to gui
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ result.json.accessToken }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: pri_snat
          with_items: "{{snat_pri|to_json|from_json|json_query('snatip_pri')}}"
          failed_when: pri_snat.json.code | int not in [200, 201]
        
        - name: Add geo global snat to gui
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ result.json.accessToken }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: geo_snat
          with_items: "{{snat_geo|to_json|from_json|json_query('snatip_geo')}}"
          failed_when: geo_snat.json.code | int not in [200, 201]
        
        ################################################# Global POOL configuration #######################################
        
        - name: get pri global pool config
          set_fact:
            pri_pool_list: >
               {"pool_list":[
                 {% for item in doc1 if ( item.F5_VIRTUALSERVERID != -1 ) %}
                 {% for vs_name in f5_vs  %}
                 {% for i in vs_name.virtual_servers if ( i.name == item.DISPLAYNAME  ) %}
                 {% if vs_name.clusterid == 1 %}
                   {"context":"F5_VS_POOLINFO","action":"F5_VS_POOLINFO_GETALL", "object": {"dgId": "{{pri_f5_dgid}}"}, "actionObject":{"DISPLAYNAME": "{{item.DISPLAYNAME}}", "VIRTUALSERVERTYPE": {{item.VIRTUALSERVERTYPE}}, "F5_VIRTUALSERVERID": {{item.F5_VIRTUALSERVERID}}}},
                   {% endif %}
                   {% endfor %}
                   {% endfor %}
                   {% endfor %}
                   ]}
        
        - name: Get pri global pool info list
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ result.json.accessToken }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: pri_pool
          with_items: "{{pri_pool_list|to_json| from_json | json_query('pool_list')}}"
          failed_when: pri_pool.status not in [200, 201]
        
        - set_fact:
            pool_list: "{{ pri_pool|to_json| from_json | json_query('results[].{action_obj:item.actionObject,json_value:json.data.values[]}')}}"
        
        - name: get pri global pool config
          set_fact:
            pri_pool_avl: >
               {"pool_list_avl":[
                 {% for item in pool_list %}
                 {% for j in item.json_value %}
                 {% if "SEC" not in j.SIGNALINGCARD_NAME %}
                 {"context":"F5_VS_POOLINFO","action":"F5_VS_POOLINFO_UPDATE", "object": {"dgId": "{{pri_f5_dgid}}"}, "actionObject": [{"SIGNALINGCARD_NAME": "{{j.SIGNALINGCARD_NAME}}", "SIGNALINGCARDID": {{j.SIGNALINGCARDID}}, "F5_PTTSERVERID": "{{pri_f5_pttserverid}}", "STATUS": 1, "F5_VIRTUALSERVERID": {{item.action_obj.F5_VIRTUALSERVERID}}, "VIRTUALSERVERTYPE": {{item.action_obj.VIRTUALSERVERTYPE}}, "POOLIPADDRESS": "{{j.IPADDRESS}}", "PRIORITY": 1 }]},
                 {% endif %}
                 {% endfor %}
                 {% endfor %}
                 ]}
        
        - name: Configure pri global pools in gui
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ result.json.accessToken }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: pri_pool_appended
          with_items: "{{pri_pool_avl|to_json| from_json | json_query('pool_list_avl')}}"
          failed_when: pri_pool_appended.json.code | int not in [200, 201]
        
        - name: get geo global pool config
          set_fact:
            geo_pool_list: >
               {"pool_list":[
                 {% for item in doc2 if ( item.F5_VIRTUALSERVERID != -1 ) %}
                 {% for vs_name in f5_vs  %}
                 {% for i in vs_name.virtual_servers if ( i.name == item.DISPLAYNAME  ) %}
                 {% if vs_name.clusterid == 2 %}
                   {"context":"F5_VS_POOLINFO","action":"F5_VS_POOLINFO_GETALL", "object": {"dgId": "{{geo_f5_dgid}}"}, "actionObject":{"DISPLAYNAME": "{{item.DISPLAYNAME}}", "VIRTUALSERVERTYPE": {{item.VIRTUALSERVERTYPE}}, "F5_VIRTUALSERVERID": {{item.F5_VIRTUALSERVERID}}}},
                   {% endif %}
                   {% endfor %}
                   {% endfor %}
                   {% endfor %}
                   ]}
        
        - name: Get geo global pool info list
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ result.json.accessToken }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: geo_pool
          with_items: "{{geo_pool_list|to_json| from_json | json_query('pool_list')}}"
          failed_when: geo_pool.status not in [200, 201]
        
        - set_fact:
            pool_list: "{{ geo_pool|to_json| from_json | json_query('results[].{action_obj:item.actionObject,json_value:json.data.values[]}')}}"
        
        - name: get geo global pool config
          set_fact:
            geo_pool_avl: >
               {"pool_list_avl":[
                 {% for item in pool_list %}
                 {% for j in item.json_value %}
                 {% if "SEC" not in j.SIGNALINGCARD_NAME  %}
                 {"context":"F5_VS_POOLINFO","action":"F5_VS_POOLINFO_UPDATE", "object": {"dgId": "{{geo_f5_dgid}}"}, "actionObject": [{"SIGNALINGCARD_NAME": "{{j.SIGNALINGCARD_NAME}}", "SIGNALINGCARDID": {{j.SIGNALINGCARDID}}, "F5_PTTSERVERID": "{{geo_f5_pttserverid}}", "STATUS": 1, "F5_VIRTUALSERVERID": {{item.action_obj.F5_VIRTUALSERVERID}}, "VIRTUALSERVERTYPE": {{item.action_obj.VIRTUALSERVERTYPE}}, "POOLIPADDRESS": "{{j.IPADDRESS}}", "PRIORITY": 1 }]},
                 {% endif %}
                 {% endfor %}
                 {% endfor %}
                 ]}
        
        - name: Configure geo global pools in gui
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ result.json.accessToken }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: geo_pool_appended
          with_items: "{{geo_pool_avl|to_json| from_json | json_query('pool_list_avl')}}"
          failed_when: geo_pool_appended.json.code | int not in [200, 201]
        
        
        ################################################# POC SNAT configuration #######################################
        
        - name: Filter pri poc vs list
          set_fact:
            doc1: "{{ virtual_server_list |to_json| from_json | json_query('json.data.childNodes[2].childNodes[].{action_object: {sig_name:dataJson.SIGNALINGCARD_NAME, pttserverid:dataJson.PTTSERVERID}, json_value: childNodes[].dataJson.{DISPLAYNAME: DISPLAYNAME, APPSERVER_VS_ID: APPSERVER_VS_ID, APPSERVER_PTTSERVERID: APPSERVER_PTTSERVERID, VIRTUALSERVERTYPE: VIRTUALSERVERTYPE, VIRTUALSERVEREXTIP_VERSION: VIRTUALSERVEREXTIP_VERSION, F5_VIRTUALSERVERID: F5_VIRTUALSERVERID} }') }}"
        
        - name: Filter geo poc vs list
          set_fact:
            doc2: "{{ virtual_server_list_geo |to_json| from_json | json_query('json.data.childNodes[2].childNodes[].{action_object: {sig_name:dataJson.SIGNALINGCARD_NAME, pttserverid:dataJson.PTTSERVERID}, json_value: childNodes[].dataJson.{DISPLAYNAME: DISPLAYNAME, APPSERVER_VS_ID: APPSERVER_VS_ID, APPSERVER_PTTSERVERID: APPSERVER_PTTSERVERID, VIRTUALSERVERTYPE: VIRTUALSERVERTYPE, VIRTUALSERVEREXTIP_VERSION: VIRTUALSERVEREXTIP_VERSION, F5_VIRTUALSERVERID: F5_VIRTUALSERVERID} }') }}"
        
        
        - name: Configure poc primary snat
          set_fact:
            snat_pri: >
               {"snatip_pri":[
                 {% for item in doc1 %}
                 {% for vs_name in f5_vs %}
                 {% for j in item.json_value %}
                 {% for i in vs_name.virtual_servers if ( i.name == j.DISPLAYNAME  ) %}
                 {% if vs_name.clusterid == 1 and ( i.pocname == item.action_object.sig_name ) %}
                 {"context":"F5_VS_IPADDRINFO","action":"F5_VS_IPADDRINFO_UPDATE", "object": {"dgId": "{{pri_f5_dgid}}"}, "actionObject":[{"IPADDRESS_VERSION": 1, "IPADDRESS": "{{ i.snatip }}", "F5_PTTSERVERID": "{{pri_f5_pttserverid}}", "F5_VIRTUALSERVERID": {{j.F5_VIRTUALSERVERID}} }]},
                   {% endif %}
                   {% endfor %}
                   {% endfor %}
                   {% endfor %}
                   {% endfor %}
                   ]}
        
        - name: Add pri poc snat to gui
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ result.json.accessToken }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: pri_snat
          with_items: "{{snat_pri|to_json|from_json|json_query('snatip_pri')}}"
          failed_when: pri_snat.json.code | int not in [200, 201]
        
        - name: Configure poc geo snat
          set_fact:
            snat_geo: >
               {"snatip_geo":[
                 {% for item in doc2 %}
                 {% for vs_name in f5_vs %}
                 {% for j in item.json_value %}
                 {% for i in vs_name.virtual_servers if ( i.name == j.DISPLAYNAME  ) %}
                 {% if vs_name.clusterid == 2 and ( i.pocname == item.action_object.sig_name ) %}
                   {"context":"F5_VS_IPADDRINFO","action":"F5_VS_IPADDRINFO_UPDATE", "object": {"dgId": "{{geo_f5_dgid}}"}, "actionObject":[{"IPADDRESS_VERSION": 1, "IPADDRESS": "{{ i.snatip }}", "F5_PTTSERVERID": "{{geo_f5_pttserverid}}", "F5_VIRTUALSERVERID": {{j.F5_VIRTUALSERVERID}} }]},
                   {% endif %}
                   {% endfor %}
                   {% endfor %}
                   {% endfor %}
                   {% endfor %}
                   ]}
        
        - name: Add geo poc snat to gui
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ result.json.accessToken }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: geo_snat
          with_items: "{{snat_geo|to_json|from_json|json_query('snatip_geo')}}"
          failed_when: geo_snat.json.code | int not in [200, 201]
        
        
        ################################################poc Pool configuration########################################################
        - name: get pri poc pool config
          set_fact:
            pri_pool_list: >
               {"pool_list":[
                 {% for item in doc1 %}
                 {% for j in item.json_value if ( j.F5_VIRTUALSERVERID != -1 ) %}
                 {% for vs_name in f5_vs%}
                 {% for i in vs_name.virtual_servers if ( i.name == j.DISPLAYNAME  ) %}
                 {% if vs_name.clusterid == 1 and ( i.pocname == item.action_object.sig_name ) %}
                   {"context":"F5_VS_POOLINFO","action":"F5_VS_POOLINFO_GETALL", "object": {"dgId": "{{pri_f5_dgid}}"}, "actionObject":{"DISPLAYNAME": "{{j.DISPLAYNAME}}", "VIRTUALSERVERTYPE": {{j.VIRTUALSERVERTYPE}}, "F5_VIRTUALSERVERID": {{j.F5_VIRTUALSERVERID}}, "APPSERVER_PTTSERVERID": "{{j.APPSERVER_PTTSERVERID}}", "APPSERVER_VS_ID": {{j.APPSERVER_VS_ID}}}},
                   {% endif %}
                   {% endfor %}
                   {% endfor %}
                   {% endfor %}
                   {% endfor %}
                   ]}
        
        - name: Get pri poc pool info list
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ result.json.accessToken }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: pri_pool
          with_items: "{{pri_pool_list|to_json| from_json | json_query('pool_list')}}"
          failed_when: pri_pool.status not in [200, 201]
        
        - set_fact:
            pool_list: "{{ pri_pool|to_json| from_json | json_query('results[].{action_obj:item.actionObject,json_value:json.data.values[]}')}}"
        
        - name: get pri poc pool config
          set_fact:
            pri_pool_avl: >
               {"pool_list_avl":[
                 {% for item in pool_list %}
                 {% for j in item.json_value %}
                 {"context":"F5_VS_POOLINFO","action":"F5_VS_POOLINFO_UPDATE", "object": {"dgId": "{{pri_f5_dgid}}"}, "actionObject": [{"SIGNALINGCARD_NAME": "{{j.SIGNALINGCARD_NAME}}", "SIGNALINGCARDID": {{j.SIGNALINGCARDID}}, "F5_PTTSERVERID": "{{pri_f5_pttserverid}}", "STATUS": 1, "F5_VIRTUALSERVERID": {{item.action_obj.F5_VIRTUALSERVERID}}, "VIRTUALSERVERTYPE": {{item.action_obj.VIRTUALSERVERTYPE}}, "POOLIPADDRESS": "{{j.IPADDRESS}}", "PRIORITY": 1 }]},
                 {% endfor %}
                 {% endfor %}
                 ]}
        
        - name: Configure pri poc pools in gui
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ result.json.accessToken }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: pri_pool_appended
          with_items: "{{pri_pool_avl|to_json| from_json | json_query('pool_list_avl')}}"
          failed_when: pri_pool_appended.json.code | int not in [200, 201]
        
        - name: get geo poc pool config
          set_fact:
            geo_pool_list: >
               {"pool_list":[
                 {% for item in doc2 %}
                 {% for j in item.json_value if ( j.F5_VIRTUALSERVERID != -1 ) %}
                 {% for vs_name in f5_vs%}
                 {% for i in vs_name.virtual_servers if ( i.name == j.DISPLAYNAME  ) %}
                 {% if vs_name.clusterid == 2 and ( i.pocname == item.action_object.sig_name ) %}
                   {"context":"F5_VS_POOLINFO","action":"F5_VS_POOLINFO_GETALL", "object": {"dgId": "{{geo_f5_dgid}}"}, "actionObject":{"DISPLAYNAME": "{{j.DISPLAYNAME}}", "VIRTUALSERVERTYPE": {{j.VIRTUALSERVERTYPE}}, "F5_VIRTUALSERVERID": {{j.F5_VIRTUALSERVERID}}, "APPSERVER_PTTSERVERID": "{{j.APPSERVER_PTTSERVERID}}", "APPSERVER_VS_ID": {{j.APPSERVER_VS_ID}}}},
                   {% endif %}
                   {% endfor %}
                   {% endfor %}
                   {% endfor %}
                   {% endfor %}
                   ]}
        
        - name: Get geo poc pool info list
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ result.json.accessToken }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: geo_pool
          with_items: "{{geo_pool_list|to_json| from_json | json_query('pool_list')}}"
          failed_when: geo_pool.status not in [200, 201]
        
        - set_fact:
            pool_list: "{{ geo_pool|to_json| from_json | json_query('results[].{action_obj:item.actionObject,json_value:json.data.values[]}')}}"
        
        - name: get geo poc pool config
          set_fact:
            geo_pool_avl: >
               {"pool_list_avl":[
                 {% for item in pool_list %}
                 {% for j in item.json_value %}
                 {"context":"F5_VS_POOLINFO","action":"F5_VS_POOLINFO_UPDATE", "object": {"dgId": "{{geo_f5_dgid}}"}, "actionObject": [{"SIGNALINGCARD_NAME": "{{j.SIGNALINGCARD_NAME}}", "SIGNALINGCARDID": {{j.SIGNALINGCARDID}}, "F5_PTTSERVERID": "{{geo_f5_pttserverid}}", "STATUS": 1, "F5_VIRTUALSERVERID": {{item.action_obj.F5_VIRTUALSERVERID}}, "VIRTUALSERVERTYPE": {{item.action_obj.VIRTUALSERVERTYPE}}, "POOLIPADDRESS": "{{j.IPADDRESS}}", "PRIORITY": 1 }]},
                 {% endfor %}
                 {% endfor %}
                 ]}
        
        - name: Configure geo poc pools in gui
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ result.json.accessToken }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: geo_pool_appended
          with_items: "{{geo_pool_avl|to_json| from_json | json_query('pool_list_avl')}}"
          failed_when: geo_pool_appended.json.code | int not in [200, 201]
        
        - name: update the task in status file
          lineinfile:
              path: "{{status_file}}"
              line: "snat_pool"
        			  
      when: "'snat_pool' not in status_check_list"
