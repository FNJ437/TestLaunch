---
- name: OAM PRI Route
  set_fact:
    oamsubnetp: "{{ item.1.subnet }}"
    oamgatewayp: "{{ item.1.gateway}}"
    oaminterfacep: "{{ item.1.interface}}"
  when: item.1.name == "oam" and item.0.clusterid == 1
  loop: "{{ chassis_list | subelements('network', skip_missing=True) }}"
  loop_control:
    extended: true

- name: OAM GEO Route
  set_fact:
    oamsubnetg: "{{ item.1.subnet }}"
    oamgatewayg: "{{ item.1.gateway}}"
    oaminterfaceg: "{{ item.1.interface}}"
  when: item.1.name == "oam" and item.0.clusterid == 2
  loop: "{{ chassis_list | subelements('network', skip_missing=True) }}"
  loop_control:
    extended: true

- name: Service PRI Route
  set_fact:
    servsubnetp: "{{ item.1.subnet }}"
    servgatewayp: "{{ item.1.gateway}}"
    servinterfacep: "{{ item.1.interface}}"
  when: item.1.name == "service" and item.0.clusterid == 1
  loop: "{{ chassis_list | subelements('network', skip_missing=True) }}"
  loop_control:
    extended: true

- name: Service GEO Route
  set_fact:
    servsubnetg: "{{ item.1.subnet }}"
    servgatewayg: "{{ item.1.gateway}}"
    servinterfaceg: "{{ item.1.interface}}"
  when: item.1.name == "service" and item.0.clusterid == 2
  loop: "{{ chassis_list | subelements('network', skip_missing=True) }}"
  loop_control:
    extended: true


- name: Log PRI Route
  set_fact:
    logsubnetp: "{{ item.1.subnet }}"
    loggatewayp: "{{ item.1.gateway}}"
    loginterfacep: "{{ item.1.interface}}"
  when: item.1.name == "log" and item.0.clusterid == 1
  loop: "{{ chassis_list | subelements('network', skip_missing=True) }}"
  loop_control:
    extended: true

- name: Log GEO Route
  set_fact:
    logsubnetg: "{{ item.1.subnet }}"
    loggatewayg: "{{ item.1.gateway}}"
    loginterfaceg: "{{ item.1.interface}}"
  when: item.1.name == "log" and item.0.clusterid == 2
  loop: "{{ chassis_list | subelements('network', skip_missing=True) }}"
  loop_control:
    extended: true


- name: Initialize Route
  set_fact:
     primary_route: "{{ oamsubnetg}}#{{oamgatewayp}}#{{oaminterfacep}} {{ servsubnetg }}#{{ servgatewayp }}#{{ servinterfacep }} {{ logsubnetg }}#{{ loggatewayp }}#{{ loginterfacep }}"
     geo_route: "{{ oamsubnetp }}#{{oamgatewayg}}#{{oaminterfaceg}} {{ servsubnetp }}#{{ servgatewayg }}#{{ servinterfaceg }} {{ logsubnetp }}#{{ loggatewayg }}#{{ loginterfaceg }}"

- debug:
    msg: "{{ primary_route  }} {{ geo_route }}"


- name: Get the list of microservice containers
  uri:
     url: "http://{{ cms.url }}/cms/networkmap?v=1620732259069"
     method: POST
     headers:
       Connection: 'keep-alive'
       Authorization: 'Bearer {{ cms_login_token }} '
       Accept: 'application/json, text/plain, */*'
     validate_certs: no
     timeout: 420
     body: '{"context":"MICROSVC_CONTAINERCONFIG","action":"MICROSVC_CONTAINERCONFIG_GETALL","object":{"dgId":""}}'
     body_format: json
  register: container_add


- name: Filter microservice containers list
  set_fact:
      doc1: "{{ container_add |to_json| from_json | json_query('json.data.values[]') }}"

- debug:
    msg: "{{ doc1 }}"


- name: Container configure request
  set_fact:
    container_add: >
       {"context":"MICROSVC_CONTAINERCONFIG","action":"MICROSVC_CONTAINERCONFIG_CONFIGURE","actionObject":[
        {% for item in doc1 %}
             {%- set jq = 'containers[?name == \'' + item.SERVICETYPE + '\'].image' -%}
             {% set img_name = microservices| first |json_query(jq)  %}
             {% if img_name |length > 0 %}
             {"CONTAINER_SIGCARDID":{{item.CONTAINER_SIGCARDID}},"IPADDRESS":"{{ item.IPADDRESS }}","SIGNALINGCARDTYPE":{{ item.SIGNALINGCARDTYPE }},"STATUS":0,"IMAGE":"{{ img_name | first }}","ROUTES":{% if item.CLUSTERID == 1 %} "{{ primary_route }}" {% elif item.CLUSTERID == 2 %} "{{ geo_route }}" {% endif %} ,"INTERFACE":null,"SERVICETYPE":"{{ item.SERVICETYPE }}","SIGNALINGCARD_NAME":"{{ item.SIGNALINGCARD_NAME }}","PTTSERVERID":"{{ item.PTTSERVERID }}","CPU_SET_CPUS": null,"SYNCGWREP_SYNCGWFUNC_FLAG":0},
             {% endif %}
        {% endfor %}
        ]}


- name: Add microservice containers
  uri:
     url: "http://{{ cms.url }}/cms/networkmap?v=1620732259069"
     method: POST
     headers:
       Connection: 'keep-alive'
       Authorization: 'Bearer {{ cms_login_token }} '
       Accept: 'application/json, text/plain, */*'
     validate_certs: no
     timeout: 420
     body: '{{ container_add }}'
     body_format: json
  register: container_configure
  when: dry_run == 0
