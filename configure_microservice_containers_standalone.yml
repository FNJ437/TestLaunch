---
- name: Get the list of microservice containers
  uri:
     url: "http://{{ cms.url }}/cms/networkmap?v=1620732259069"
     method: POST
     headers:
       Connection: 'keep-alive'
       Authorization: 'Bearer {{ cms_login_token }} '
       Accept: 'application/json, text/plain, */*'
     validate_certs: no
     timeout: 420
     body: '{"context":"MICROSVC_CONTAINERCONFIG","action":"MICROSVC_CONTAINERCONFIG_GETALL","object":{"dgId":""}}'
     body_format: json
  register: container_add
  failed_when: container_add.status not in [200, 201]


- name: Filter microservice containers list
  set_fact:
      doc1: "{{ container_add |to_json| from_json | json_query('json.data.values[]') }}"

- debug:
    msg: "{{ doc1 }}"

- name: Container configure request
  set_fact:
    container_pri: >
       {"context":"MICROSVC_CONTAINERCONFIG","action":"MICROSVC_CONTAINERCONFIG_CONFIGURE","actionObject":[
        {% for item in doc1 %}
        {% for m in microservices if item.CLUSTERID | string() == m.clusterid | string() %}
             {%- set jq = 'containers[?name == \'' + item.SERVICETYPE + '\'].image' -%}
             {% set img_name = microservices| first |json_query(jq)  %}
             {% if img_name |length > 0 %}
             {% if m.chassisid == 1 %}
              {"CONTAINER_SIGCARDID":{{item.CONTAINER_SIGCARDID}},"IPADDRESS":"{{ item.IPADDRESS }}","SIGNALINGCARDTYPE":{{ item.SIGNALINGCARDTYPE }},"STATUS":0,"IMAGE":"{{ img_name | first }}","ROUTES":"{{ m.route }}","INTERFACE":null,"SERVICETYPE":"{{ item.SERVICETYPE }}","SIGNALINGCARD_NAME":"{{ item.SIGNALINGCARD_NAME }}","PTTSERVERID":"{{ item.PTTSERVERID }}","CPU_SET_CPUS": null,"SYNCGWREP_SYNCGWFUNC_FLAG":0},
             {% endif %}
             {% endif %}
         {% endfor %}
         {% endfor %}
        ]}

- name: Add Primary microservice containers
  uri:
     url: "http://{{ cms.url }}/cms/networkmap?v=1620732259069"
     method: POST
     headers:
       Connection: 'keep-alive'
       Authorization: 'Bearer {{ cms_login_token }} '
       Accept: 'application/json, text/plain, */*'
     validate_certs: no
     timeout: 420
     body: '{{ container_pri }}'
     body_format: json
  register: container_configure
  when: dry_run == 0
  failed_when: container_configure.json.code | int not in [200, 201]


- name: Container configure request
  set_fact:
    container_geo: >
       {"context":"MICROSVC_CONTAINERCONFIG","action":"MICROSVC_CONTAINERCONFIG_CONFIGURE","actionObject":[
        {% for item in doc1 %}
        {% for m in microservices if item.CLUSTERID | string() == m.clusterid | string() %}
             {%- set jq = 'containers[?name == \'' + item.SERVICETYPE + '\'].image' -%}
             {% set img_name = microservices| first |json_query(jq)  %}
             {% if img_name |length > 0 %}
             {% if m.clusterid == 2 %}
              {"CONTAINER_SIGCARDID":{{item.CONTAINER_SIGCARDID}},"IPADDRESS":"{{ item.IPADDRESS }}","SIGNALINGCARDTYPE":{{ item.SIGNALINGCARDTYPE }},"STATUS":0,"IMAGE":"{{ img_name | first }}","ROUTES":"{{ m.route }}","INTERFACE":null,"SERVICETYPE":"{{ item.SERVICETYPE }}","SIGNALINGCARD_NAME":"{{ item.SIGNALINGCARD_NAME }}","PTTSERVERID":"{{ item.PTTSERVERID }}","CPU_SET_CPUS": null,"SYNCGWREP_SYNCGWFUNC_FLAG":0},
             {% endif %}
             {% endif %}
         {% endfor %}
         {% endfor %}
        ]}



#- name: Add Geo microservice containers
#  uri:
#     url: "http://{{ cms.url }}/cms/networkmap?v=1620732259069"
#     method: POST
#     headers:
#       Connection: 'keep-alive'
#       Authorization: 'Bearer {{ cms_login_token }} '
#       Accept: 'application/json, text/plain, */*'
#     validate_certs: no
#     timeout: 420
#     body: '{{ container_geo }}'
#     body_format: json
#  register: container_configure
#  when: dry_run == 0

