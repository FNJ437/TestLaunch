- name: Get networkmap
  no_log: true
  uri:
    url: "http://{{cms.url}}/cms/networkmap?v=1633605424448"
    method: POST
    headers:
      Connection: 'keep-alive'
      Authorization: 'Bearer {{ result.json.accessToken }} '
      Accept: 'application/json, text/plain, */*'
    validate_certs: no
    body: {"context":"networkmap","action":"networkmap"}
    body_format: json
  register: get_networkmap
  failed_when: get_networkmap.status not in [200, 201]


- name: Fetching DGID of F5
  set_fact:
    geo_f5_dgid: >-
        {% for server in get_networkmap.json.dgInfo %}{% if server.CARDTYPE == 101 and server.cardDetails[0].CLUSTERID == '2'%}{{server.DGID}}{% endif %}{% endfor %}
    pri_f5_dgid: >-
        {% for server in get_networkmap.json.dgInfo %}{% if server.CARDTYPE == 101 and server.cardDetails[0].CLUSTERID == '1'%}{{server.DGID}}{% endif %}{% endfor %}

- name: Fetching F5 PTTSERVERIDs
  set_fact:
    geo_f5_pttserverid: >-
        {% for server in get_networkmap.json.dgInfo %}{% if server.CARDTYPE == 101 and server.cardDetails[0].CLUSTERID == '2'%}{{server.cardDetails[0].PTTSERVERID}}{% endif %}{% endfor %}
    pri_f5_pttserverid: >-
        {% for server in get_networkmap.json.dgInfo %}{% if server.CARDTYPE == 101 and server.cardDetails[0].CLUSTERID == '1'%}{{server.cardDetails[0].PTTSERVERID}}{% endif %}{% endfor %}

- name: Get the list of primary Global virtual servers
  no_log: true
  uri:
     url: "http://{{ cms.url }}/cms/networkmap?v=1620732259069"
     method: POST
     headers:
       Connection: 'keep-alive'
       Authorization: 'Bearer {{ result.json.accessToken }} '
       Accept: 'application/json, text/plain, */*'
     validate_certs: no
     body: '{"context":"CONFIGURED_VIRTUAL_SERVER","action":"CONFIGURED_VIRTUAL_SERVER_GETALL","object":{"dgId":"{{pri_f5_dgid}}"}}'
     body_format: json
  register: virtual_server_list
  failed_when: virtual_server_list.status not in [200, 201]

- name: Filter pri vs list (Global)
  set_fact:
    doc1: "{{ virtual_server_list |to_json| from_json | json_query('json.data.childNodes[0].childNodes[].dataJson') }}"


- name: Configure pri Global vs
  set_fact:
    vs_pri: >
       {"ip_pri":[
         {% for item in doc1 %}
         {% for vs_name in f5_vs  %}
         {% for i in vs_name.virtual_servers if ( i.name == item.DISPLAYNAME  ) %}
         {% if vs_name.clusterid == 1 %}
           {"context": "CONFIGURED_VS_DETAILS","action": "CONFIGURE_VIRTUAL_SERVER", "object": {"dgId": "{{pri_f5_dgid}}"}, "actionObject": {"DISPLAYNAME": "{{item.DISPLAYNAME}}","VIRTUALSERVEREXTERNALIP": "{{i.virtualserverexternalip}}","APPSERVER_PTTSERVERID": "{{item.APPSERVER_PTTSERVERID}}", "STATUS": 0, "VIRTUALSERVERTYPE": {{item.VIRTUALSERVERTYPE}}, "VIRTUALSERVEREXTIP_VERSION": {{item.VIRTUALSERVEREXTIP_VERSION}}}},
           {% endif %}
           {% endfor %}
           {% endfor %}
           {% endfor %}
           ]}

- name: Get the list of geo global virtual servers
  no_log: true
  uri:
     url: "http://{{ cms.url }}/cms/networkmap?v=1620732259069"
     method: POST
     headers:
       Connection: 'keep-alive'
       Authorization: 'Bearer {{ result.json.accessToken }} '
       Accept: 'application/json, text/plain, */*'
     validate_certs: no
     body: '{"context":"CONFIGURED_VIRTUAL_SERVER","action":"CONFIGURED_VIRTUAL_SERVER_GETALL","object":{"dgId":"{{geo_f5_dgid}}"}}'
     body_format: json
  register: virtual_server_list_geo
  failed_when: virtual_server_list_geo.status not in [200, 201]

- name: Filter geo vs list global
  set_fact:
    doc2: "{{ virtual_server_list_geo |to_json| from_json | json_query('json.data.childNodes[0].childNodes[].dataJson') }}"


- name: Cconfigure geo vs global
  set_fact:
    vs_geo: >
       {"ip_geo":[
         {% for item in doc2 %}
         {% for vs_name in f5_vs  %}
         {% for i in vs_name.virtual_servers if ( i.name == item.DISPLAYNAME  ) %}
         {% if vs_name.clusterid == 2 %}
           {"context": "CONFIGURED_VS_DETAILS","action": "CONFIGURE_VIRTUAL_SERVER", "object": {"dgId": "{{geo_f5_dgid}}"}, "actionObject": {"DISPLAYNAME": "{{item.DISPLAYNAME}}","VIRTUALSERVEREXTERNALIP": "{{i.virtualserverexternalip}}","APPSERVER_PTTSERVERID": "{{item.APPSERVER_PTTSERVERID}}", "STATUS": 0, "VIRTUALSERVERTYPE": {{item.VIRTUALSERVERTYPE}}, "VIRTUALSERVEREXTIP_VERSION": {{item.VIRTUALSERVEREXTIP_VERSION}}}},
           {% endif %}
           {% endfor %}
           {% endfor %}
           {% endfor %}
           ]}

- name: Add pri global virtual servers to gui
  uri:
     url: "http://{{ cms.url }}/cms/networkmap?v=1620732259069"
     method: POST
     headers:
       Connection: 'keep-alive'
       Authorization: 'Bearer {{ result.json.accessToken }} '
       Accept: 'application/json, text/plain, */*'
     validate_certs: no
     timeout: 420
     body: '{{item}}'
     body_format: json
  register: pri_vs
  with_items: "{{vs_pri|to_json|from_json|json_query('ip_pri')}}"
  failed_when: pri_vs.json.code | int not in [200, 201]

- name: Add geo global virtual servers to gui
  uri:
     url: "http://{{ cms.url }}/cms/networkmap?v=1620732259069"
     method: POST
     headers:
       Connection: 'keep-alive'
       Authorization: 'Bearer {{ result.json.accessToken }} '
       Accept: 'application/json, text/plain, */*'
     validate_certs: no
     timeout: 420
     body: '{{item}}'
     body_format: json
  register: geo_vs
  with_items: "{{vs_geo|to_json|from_json|json_query('ip_geo')}}"
  failed_when: geo_vs.json.code | int not in [200, 201]

###################################################### POC VS ##########################################################################

- name: Filter poc pri vs list
  set_fact:
    doc1: "{{ virtual_server_list |to_json| from_json | json_query('json.data.childNodes[2].childNodes[].{action_object: {sig_name:dataJson.SIGNALINGCARD_NAME, pttserverid:dataJson.PTTSERVERID}, json_value: childNodes[].dataJson.{DISPLAYNAME: DISPLAYNAME, APPSERVER_VS_ID: APPSERVER_VS_ID, APPSERVER_PTTSERVERID: APPSERVER_PTTSERVERID, VIRTUALSERVERTYPE: VIRTUALSERVERTYPE, VIRTUALSERVEREXTIP_VERSION: VIRTUALSERVEREXTIP_VERSION, F5_VIRTUALSERVERID: F5_VIRTUALSERVERID} }') }}"

- name: Filter poc geo vs list
  set_fact:
    doc2: "{{ virtual_server_list_geo |to_json| from_json | json_query('json.data.childNodes[2].childNodes[].{action_object: {sig_name:dataJson.SIGNALINGCARD_NAME, pttserverid:dataJson.PTTSERVERID}, json_value: childNodes[].dataJson.{DISPLAYNAME: DISPLAYNAME, APPSERVER_VS_ID: APPSERVER_VS_ID, APPSERVER_PTTSERVERID: APPSERVER_PTTSERVERID, VIRTUALSERVERTYPE: VIRTUALSERVERTYPE, VIRTUALSERVEREXTIP_VERSION: VIRTUALSERVEREXTIP_VERSION, F5_VIRTUALSERVERID: F5_VIRTUALSERVERID} }') }}"


- name: Configure poc pri vs
  set_fact:
    vs_pri: >
       {"ip_pri":[
         {% for item in doc1 %}
         {% for vs_name in f5_vs %}
         {% for j in item.json_value %}
         {% for i in vs_name.virtual_servers if ( i.name == j.DISPLAYNAME ) %}
         {% if vs_name.clusterid == 1 and ( i.pocname == item.action_object.sig_name ) %}
           {"context": "CONFIGURED_VS_DETAILS","action": "CONFIGURE_VIRTUAL_SERVER", "object": {"dgId": "{{pri_f5_dgid}}"}, "actionObject": {"DISPLAYNAME": "{{j.DISPLAYNAME}}","APPSERVER_VS_ID": {{j.APPSERVER_VS_ID}},"VIRTUALSERVEREXTERNALIP": "{{i.virtualserverexternalip}}","APPSERVER_PTTSERVERID": "{{j.APPSERVER_PTTSERVERID}}", "STATUS": 0, "VIRTUALSERVERTYPE": {{j.VIRTUALSERVERTYPE}}, "VIRTUALSERVEREXTIP_VERSION": {{j.VIRTUALSERVEREXTIP_VERSION}}}},
           {% endif %}
           {% endfor %}
           {% endfor %}
           {% endfor %}
           {% endfor %}
           ]}

- name: Add poc pri virtual servers to gui
  uri:
     url: "http://{{ cms.url }}/cms/networkmap?v=1620732259069"
     method: POST
     headers:
       Connection: 'keep-alive'
       Authorization: 'Bearer {{ result.json.accessToken }} '
       Accept: 'application/json, text/plain, */*'
     validate_certs: no
     timeout: 420
     body: '{{item}}'
     body_format: json
  register: pri_vs
  with_items: "{{vs_pri|to_json|from_json|json_query('ip_pri')}}"
  failed_when: pri_vs.json.code | int not in [200, 201]

- name: Configure poc geo vs
  set_fact:
    vs_geo: >
       {"ip_geo":[
         {% for item in doc2 %}
         {% for vs_name in f5_vs %}
         {% for j in item.json_value %}
         {% for i in vs_name.virtual_servers if ( i.name == j.DISPLAYNAME ) %}
         {% if vs_name.clusterid == 2 and ( i.pocname == item.action_object.sig_name ) %}
           {"context": "CONFIGURED_VS_DETAILS","action": "CONFIGURE_VIRTUAL_SERVER", "object": {"dgId": "{{geo_f5_dgid}}"}, "actionObject": {"DISPLAYNAME":  "{{j.DISPLAYNAME}}","APPSERVER_VS_ID": {{j.APPSERVER_VS_ID}},"VIRTUALSERVEREXTERNALIP": "{{i.virtualserverexternalip}}","APPSERVER_PTTSERVERID": "{{j.APPSERVER_PTTSERVERID}}", "STATUS": 0, "VIRTUALSERVERTYPE": {{j.VIRTUALSERVERTYPE}}, "VIRTUALSERVEREXTIP_VERSION": {{j.VIRTUALSERVEREXTIP_VERSION}}}},
           {% endif %}
           {% endfor %}
           {% endfor %}
           {% endfor %}
           {% endfor %}
           ]}

- name: Add poc geo virtual servers to gui
  uri:
     url: "http://{{ cms.url }}/cms/networkmap?v=1620732259069"
     method: POST
     headers:
       Connection: 'keep-alive'
       Authorization: 'Bearer {{ result.json.accessToken }} '
       Accept: 'application/json, text/plain, */*'
     validate_certs: no
     timeout: 420
     body: '{{item}}'
     body_format: json
  register: geo_vs
  with_items: "{{vs_geo|to_json|from_json|json_query('ip_geo')}}"
  failed_when: geo_vs.json.code | int not in [200, 201]

- name: update the task in status file
  lineinfile:
      path: "{{status_file}}"
      line: "vs"
