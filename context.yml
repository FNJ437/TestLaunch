---
- hosts: all
  become: yes
  become_method: sudo
  gather_facts: false

  tasks:
    - block:
        - name: Get networkmap
          no_log: true
          uri:
            url: "http://{{cmsurl}}/cms/networkmap?v=1633605424448"
            method: POST
            headers:
              Connection: 'keep-alive'
              Authorization: 'Bearer {{ result.json.accessToken }} '
              Accept: 'application/json, text/plain, */*'
            validate_certs: no
            body: {"context":"networkmap","action":"networkmap"}
            body_format: json
          register: get_networkmap
          failed_when: get_networkmap.status not in [200, 201]
        
        
        - name: Fetching DGID of F5
          set_fact:
            geo_f5_dgid: >-
                {% for server in get_networkmap.json.dgInfo %}{% if server.CARDTYPE == 101 and server.cardDetails[0].CLUSTERID == '2'%}{{server.DGID}}{% endif %}{% endfor %}
            pri_f5_dgid: >-
                {% for server in get_networkmap.json.dgInfo %}{% if server.CARDTYPE == 101 and server.cardDetails[0].CLUSTERID == '1'%}{{server.DGID}}{% endif %}{% endfor %}
        
        - name: Fetching F5 PTTSERVERIDs
          set_fact:
            geo_f5_pttserverid: >-
                {% for server in get_networkmap.json.dgInfo %}{% if server.CARDTYPE == 101 and server.cardDetails[0].CLUSTERID == '2'%}{{server.cardDetails[0].PTTSERVERID}}{% endif %}{% endfor %}
            pri_f5_pttserverid: >-
                {% for server in get_networkmap.json.dgInfo %}{% if server.CARDTYPE == 101 and server.cardDetails[0].CLUSTERID == '1'%}{{server.cardDetails[0].PTTSERVERID}}{% endif %}{% endfor %}
        
        - name: Get the list of primary f5 context
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ cms_login_token }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             body: '{"context":"F5_VS_CTX_POOL_INFO","action":"F5_VS_CTX_POOL_INFO_GETALL","object":{"dgId":"{{pri_f5_dgid}}"}}'
             body_format: json
          register: f5_context_list
          failed_when: f5_context_list.status not in [200, 201]
        
        #excluding liserver, filestore, egls, keymanagement
        
        - name: Filter pri context list
          set_fact:
            pri_context: "{{ f5_context_list |to_json| from_json | json_query('json.data.{action_obj:childNodes[].name,context:childNodes[].childNodes[].childNodes[] }') }}"
        
        - name: get context config
          set_fact:
            pri_context_list: >
               {"context_list":[
                 {% for item in pri_context.context if ( item.dataJson.SERVICEURLCONTEXT not in  ( "liserver", "filestore", "egls", "keymanagement")) %}
                 {"context":"CONFIGURED_CTXT_POOL_IP","action":"CONFIGURED_CTXT_POOL_IP_GETALL","actionObject":{"PTTSERVERID":"{{pri_f5_pttserverid}}","URLCONTEXT":"{{ item.dataJson.SERVICEURLCONTEXT}}","NODETYPE":"{{ item.type }}"},"object":{"dgId":"{{pri_f5_dgid}}"}},
                 {% endfor %}
                 ]}
        
        - name: Get Primary context
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ cms_login_token }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: pri_context_get
          with_items: "{{pri_context_list|to_json| from_json | json_query('context_list')}}"
          failed_when: pri_context_get.status not in [200, 201]
        
        - name: Filter pri context list
          set_fact:
            pri_context_details: "{{ pri_context_get |to_json| from_json | json_query('results[].json.data[]') }}"
        
        - name: get url context config
          set_fact:
            pri_urlcontext_list: >
               {"context_list":[
                 {% for item in pri_context_details %}
                 {% if item.DISPLAYNAME not in  ( "WMS KMS HTTPS WIFI IPv4 Virtual server", "WMS KMS HTTPS  WIFI IPv6 Virtual server", "WMS KMS HTTPS INET APN IPv4 Virtual server", "WMS KMS HTTPS INET APN IPv6 Virtual server", "WMS KMS HTTPS IMS APN IPv4 Virtual server", "WMS KMS HTTPS IMS APN IPv6 Virtual server" ) %}
                 {"context":"CONFIGURED_CTXT_POOL_IP","action":"CONFIGURED_CTXT_POOL_IP_UPDATE","actionObject":[{"DISPLAYNAME":"{{item.DISPLAYNAME}}","CLUSTERID":{{item.CLUSTERID}},"PORT":{{item.PORT}},"SIGNALINGCARDID":{{item.SIGNALINGCARDID}},"SUBNETID":{{item.SUBNETID}},"IPADDRESS":"{{item.IPADDRESS}}","SERVICEVERTAG":"{{item.SERVICEVERTAG}}","STATUS":1,"SIGNALINGCARD_NAME":"{{item.SIGNALINGCARD_NAME}}","FQDN":null,"SUBNETNAME":"{{item.SUBNETNAME}}","URLCONTEXTID":{{item.URLCONTEXTID}},"IS_DEFAULT":{{item.IS_DEFAULT}},"IPADDRESS_TYPE":{{item.IPADDRESS_TYPE}},"IP_VERSION":"IPV4","IPADDRESS_TYPE_DISPLAYNAME":"Physical IPv4 Address","STATUS_DISPLAYNAME":"Disabled","selected":true,"SERVICE_INSTANCE_SELECT":0}],"object":{"dgId":"{{pri_f5_dgid}}"}},
                 {% endif %}
                 {% endfor %}
                 ]}
        
        - name: Configure contexts in gui except kmsws, egls and filestore
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ cms_login_token }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: pri_context_update
          with_items: "{{pri_urlcontext_list|to_json| from_json | json_query('context_list')}}"
          failed_when: pri_context_update.json.code | int not in [200, 201]
        
        
        # include liserver, filestore, egls, keymanagement
        
        - name: Filter pri context list
          set_fact:
            pri_context: "{{ f5_context_list |to_json| from_json | json_query('json.data.{action_obj:childNodes[].name,context:childNodes[].childNodes[].childNodes[] }') }}"
        
        - name: get context config
          set_fact:
            pri_context_list: >
               {"context_list":[
                 {% for item in pri_context.context if ( item.dataJson.SERVICEURLCONTEXT in  ( "filestore", "egls", "keymanagement")) %}
                   {"context":"CONFIGURED_CTXT_POOL_IP","action":"CONFIGURED_CTXT_POOL_IP_GETALL","actionObject":{"PTTSERVERID":"{{pri_f5_pttserverid}}","URLCONTEXT":"{{ item.dataJson.SERVICEURLCONTEXT}}","NODETYPE":"{{ item.type }}"},"object":{"dgId":"{{pri_f5_dgid}}"}},
                 {% endfor %}
                 ]}
        
        - name: get context for filestore, egls, keymanagement
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ cms_login_token }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: pri_context_get
          with_items: "{{pri_context_list|to_json| from_json | json_query('context_list')}}"
          failed_when: pri_context_get.status not in [200, 201]
        
        - name: Filter pri context list
          set_fact:
            pri_context_details: "{{ pri_context_get |to_json| from_json | json_query('results[].json.data[]') }}"
        
        - name: get url context config
          set_fact:
            pri_urlcontext_list: >
               {"context_list":[
                 {% for item in pri_context_details %}
                 {% if item.DISPLAYNAME not in ( "WMS HTTPS  INET (WIFI) IPv4 Virtual server", "WMS HTTPS  INET (WIFI) IPv6 Virtual server", "WMS HTTPS Cellular INET APN IPv4 Virtual server", "WMS HTTPS Cellular INET APN IPv6 Virtual server", "WMS HTTPS Cellular IMS APN IPv4 Virtual server", "WMS HTTPS Cellular IMS APN IPv6 Virtual server" ) %}
                 {"context":"CONFIGURED_CTXT_POOL_IP","action":"CONFIGURED_CTXT_POOL_IP_UPDATE","actionObject":[{"DISPLAYNAME":"{{item.DISPLAYNAME}}","CLUSTERID":{{item.CLUSTERID}},"PORT":{{item.PORT}},"SIGNALINGCARDID":{{item.SIGNALINGCARDID}},"SUBNETID":{{item.SUBNETID}},"IPADDRESS":"{{item.IPADDRESS}}","SERVICEVERTAG":"{{item.SERVICEVERTAG}}","STATUS":1,"SIGNALINGCARD_NAME":"{{item.SIGNALINGCARD_NAME}}","FQDN":null,"SUBNETNAME":"{{item.SUBNETNAME}}","URLCONTEXTID":{{item.URLCONTEXTID}},"IS_DEFAULT":{{item.IS_DEFAULT}},"IPADDRESS_TYPE":{{item.IPADDRESS_TYPE}},"IP_VERSION":"IPV4","IPADDRESS_TYPE_DISPLAYNAME":"Physical IPv4 Address","STATUS_DISPLAYNAME":"Disabled","selected":true,"SERVICE_INSTANCE_SELECT":0}],"object":{"dgId":"{{pri_f5_dgid}}"}},
                 {% endif %}
                 {% endfor %}
                 ]}
        
        - name: Configure contexts in gui for kmsws, egls and filestore
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ cms_login_token }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: pri_context_update
          with_items: "{{pri_urlcontext_list|to_json| from_json | json_query('context_list')}}"
          failed_when: pri_context_update.json.code | int not in [200, 201]
        
        #################################Geo update#########################################
        - name: Get the list of geo f5 context
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ cms_login_token }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             body: '{"context":"F5_VS_CTX_POOL_INFO","action":"F5_VS_CTX_POOL_INFO_GETALL","object":{"dgId":"{{geo_f5_dgid}}"}}'
             body_format: json
          register: f5_context_list
          failed_when: f5_context_list.status not in [200, 201]
        
        #excluding liserver, filestore, egls, keymanagement
        
        - name: Filter geo context list
          set_fact:
            geo_context: "{{ f5_context_list |to_json| from_json | json_query('json.data.{action_obj:childNodes[].name,context:childNodes[].childNodes[].childNodes[] }') }}"
        
        - name: get context config
          set_fact:
            geo_context_list: >
               {"context_list":[
                 {% for item in geo_context.context if ( item.dataJson.SERVICEURLCONTEXT not in  ( "liserver", "filestore", "egls", "keymanagement")) %}
                 {"context":"CONFIGURED_CTXT_POOL_IP","action":"CONFIGURED_CTXT_POOL_IP_GETALL","actionObject":{"PTTSERVERID":"{{geo_f5_pttserverid}}","URLCONTEXT":"{{ item.dataJson.SERVICEURLCONTEXT}}","NODETYPE":"{{ item.type }}"},"object":{"dgId":"{{geo_f5_dgid}}"}},
                 {% endfor %}
                 ]}
        
        - name: Get geo context
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ cms_login_token }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: geo_context_get
          with_items: "{{geo_context_list|to_json| from_json | json_query('context_list')}}"
          failed_when: geo_context_get.status not in [200, 201]
        
        - name: Filter geo context list
          set_fact:
            geo_context_details: "{{ geo_context_get |to_json| from_json | json_query('results[].json.data[]') }}"
        
        - name: get url context config
          set_fact:
            geo_urlcontext_list: >
               {"context_list":[
                 {% for item in geo_context_details %}
                 {% if item.DISPLAYNAME not in ( "WMS KMS HTTPS WIFI IPv4 Virtual server", "WMS KMS HTTPS  WIFI IPv6 Virtual server", "WMS KMS HTTPS INET APN IPv4 Virtual server", "WMS KMS HTTPS INET APN IPv6 Virtual server", "WMS KMS HTTPS IMS APN IPv4 Virtual server", "WMS KMS HTTPS IMS APN IPv6 Virtual server" ) %}
                 {"context":"CONFIGURED_CTXT_POOL_IP","action":"CONFIGURED_CTXT_POOL_IP_UPDATE","actionObject":[{"DISPLAYNAME":"{{item.DISPLAYNAME}}","CLUSTERID":{{item.CLUSTERID}},"PORT":{{item.PORT}},"SIGNALINGCARDID":{{item.SIGNALINGCARDID}},"SUBNETID":{{item.SUBNETID}},"IPADDRESS":"{{item.IPADDRESS}}","SERVICEVERTAG":"{{item.SERVICEVERTAG}}","STATUS":1,"SIGNALINGCARD_NAME":"{{item.SIGNALINGCARD_NAME}}","FQDN":null,"SUBNETNAME":"{{item.SUBNETNAME}}","URLCONTEXTID":{{item.URLCONTEXTID}},"IS_DEFAULT":{{item.IS_DEFAULT}},"IPADDRESS_TYPE":{{item.IPADDRESS_TYPE}},"IP_VERSION":"IPV4","IPADDRESS_TYPE_DISPLAYNAME":"Physical IPv4 Address","STATUS_DISPLAYNAME":"Disabled","selected":true,"SERVICE_INSTANCE_SELECT":0}],"object":{"dgId":"{{geo_f5_dgid}}"}},
                 {% endif %}
                 {% endfor %}
                 ]}
        
        - name: Configure contexts in gui except kmsws, egls and filestore
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ cms_login_token }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: geo_context_update
          with_items: "{{geo_urlcontext_list|to_json| from_json | json_query('context_list')}}"
          failed_when: geo_context_update.json.code | int not in [200, 201]
        
        
        # include liserver, filestore, egls, keymanagement
        
        - name: Filter geo context list
          set_fact:
            geo_context: "{{ f5_context_list |to_json| from_json | json_query('json.data.{action_obj:childNodes[].name,context:childNodes[].childNodes[].childNodes[] }') }}"
        
        - name: get context config
          set_fact:
            geo_context_list: >
               {"context_list":[
                 {% for item in geo_context.context if ( item.dataJson.SERVICEURLCONTEXT in  ( "filestore", "egls", "keymanagement")) %}
                   {"context":"CONFIGURED_CTXT_POOL_IP","action":"CONFIGURED_CTXT_POOL_IP_GETALL","actionObject":{"PTTSERVERID":"{{geo_f5_pttserverid}}","URLCONTEXT":"{{ item.dataJson.SERVICEURLCONTEXT}}","NODETYPE":"{{ item.type }}"},"object":{"dgId":"{{geo_f5_dgid}}"}},
                 {% endfor %}
                 ]}
        
        - name: get context for filestore, egls, keymanagement
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ cms_login_token }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: geo_context_get
          with_items: "{{geo_context_list|to_json| from_json | json_query('context_list')}}"
          failed_when: geo_context_get.status not in [200, 201]
        
        - name: Filter geo context list
          set_fact:
            geo_context_details: "{{ geo_context_get |to_json| from_json | json_query('results[].json.data[]') }}"
        
        - name: get url context config
          set_fact:
            geo_urlcontext_list: >
               {"context_list":[
                 {% for item in geo_context_details %}
                 {% if item.DISPLAYNAME not in ( "WMS HTTPS  INET (WIFI) IPv4 Virtual server", "WMS HTTPS  INET (WIFI) IPv6 Virtual server", "WMS HTTPS Cellular INET APN IPv4 Virtual server", "WMS HTTPS Cellular INET APN IPv6 Virtual server", "WMS HTTPS Cellular IMS APN IPv4 Virtual server", "WMS HTTPS Cellular IMS APN IPv6 Virtual server" ) %}
                 {"context":"CONFIGURED_CTXT_POOL_IP","action":"CONFIGURED_CTXT_POOL_IP_UPDATE","actionObject":[{"DISPLAYNAME":"{{item.DISPLAYNAME}}","CLUSTERID":{{item.CLUSTERID}},"PORT":{{item.PORT}},"SIGNALINGCARDID":{{item.SIGNALINGCARDID}},"SUBNETID":{{item.SUBNETID}},"IPADDRESS":"{{item.IPADDRESS}}","SERVICEVERTAG":"{{item.SERVICEVERTAG}}","STATUS":1,"SIGNALINGCARD_NAME":"{{item.SIGNALINGCARD_NAME}}","FQDN":null,"SUBNETNAME":"{{item.SUBNETNAME}}","URLCONTEXTID":{{item.URLCONTEXTID}},"IS_DEFAULT":{{item.IS_DEFAULT}},"IPADDRESS_TYPE":{{item.IPADDRESS_TYPE}},"IP_VERSION":"IPV4","IPADDRESS_TYPE_DISPLAYNAME":"Physical IPv4 Address","STATUS_DISPLAYNAME":"Disabled","selected":true,"SERVICE_INSTANCE_SELECT":0}],"object":{"dgId":"{{geo_f5_dgid}}"}},
                 {% endif %}
                 {% endfor %}
                 ]}
        
        - name: Configure contexts in gui for kmsws, egls and filestore
          uri:
             url: "http://{{ cmsurl }}/cms/networkmap?v=1620732259069"
             method: POST
             headers:
               Connection: 'keep-alive'
               Authorization: 'Bearer {{ cms_login_token }} '
               Accept: 'application/json, text/plain, */*'
             validate_certs: no
             timeout: 420
             body: '{{item}}'
             body_format: json
          register: geo_context_update
          with_items: "{{geo_urlcontext_list|to_json| from_json | json_query('context_list')}}"
          failed_when: geo_context_update.json.code | int not in [200, 201]
        
        - name: update the task in status file
          lineinfile:
              path: "{{status_file}}"
              line: "context"

      when: "'context' not in status_check_list"
